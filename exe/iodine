#!/usr/bin/env ruby
begin
  require 'rack'
rescue LoadError
  puts "ERROR: the iodine command-line utility requires the gem: rack."
  exit(0)
end
require 'iodine'

module Iodine
  # The Iodine::Base namespace is reserved for internal use and is NOT part of the public API.
  module Base
    # Command line interface. The Ruby CLI might be changed in future versions.
    module CLI

      def self.try_file filename
        return nil unless File.exist? filename
        return ::Rack::Builder.parse_file filename
      end

      def self.get_app_opts
        app, opt = nil, nil
        filename = Iodine::DEFAULT_SETTINGS[:filename_]
        if filename
          app, opt = try_file filename
          app, opt = try_file "#{filename}.ru" unless opt
          unless opt
            puts "* Couldn't find #{filename}\n  testing for config.ru\n"
            app, opt = try_file "config.ru"
          end
        else
          app, opt = try_file "config.ru";
        end

        unless opt
          puts "WARNING: Ruby application not found#{ filename ? " - missing both #{filename} and config.ru" : " - missing config.ru"}."
          if Iodine::DEFAULT_SETTINGS[:public]
            puts "         Running only static file service."
            opt = ::Rack::Server::Options.new.parse!([])
            app = Proc.new { [404, {}, "Not Found!"] }
          else
            puts "\nERROR: Couldn't run Ruby application, check command line arguments."
            ARGV << "-?"
            Iodine::Base::CLI.parse
            exit(0);
          end
        end
        return app, opt
      end

      def self.perform_warmup(app)
        # load anything marked with `autoload`, since autoload isn't thread safe nor fork friendly.
        Iodine.on_state(:on_start) do
          Module.constants.each do |n|
            begin
              Object.const_get(n)
            rescue StandardError => _e
            end
          end
          ::Rack::Builder.new(app) do |r|
            r.warmup do |a|
              client = ::Rack::MockRequest.new(a)
              client.get('/')
            end
          end
        end
      end

      def self.call
        app, opt = get_app_opts
        perform_warmup(app) if Iodine::DEFAULT_SETTINGS[:warmup_]
        Iodine::Rack.run(app, opt)
      end
    end
  end
end

Iodine::Base::CLI.call
